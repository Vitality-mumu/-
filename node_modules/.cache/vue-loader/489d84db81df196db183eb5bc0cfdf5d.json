{"remainingRequest":"C:\\Users\\DELL\\Desktop\\app\\safe-app\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\DELL\\Desktop\\app\\safe-app\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\DELL\\Desktop\\app\\safe-app\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\DELL\\Desktop\\app\\safe-app\\src\\pages\\detail\\DetailPage.vue?vue&type=template&id=5b69124a&scoped=true&","dependencies":[{"path":"C:\\Users\\DELL\\Desktop\\app\\safe-app\\src\\pages\\detail\\DetailPage.vue","mtime":1627983243896},{"path":"C:\\Users\\DELL\\Desktop\\app\\safe-app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\DELL\\Desktop\\app\\safe-app\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\DELL\\Desktop\\app\\safe-app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\DELL\\Desktop\\app\\safe-app\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}